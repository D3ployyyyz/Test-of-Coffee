<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<title>WPlace Estilizado</title>
<style>
  :root {
    --fast: .22s;
    --soft-shadow-2: 0 14px 40px rgba(18,16,14,0.12);
  }

  html,body {
    height:100%;
    margin:0;
    font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif;
    background: linear-gradient(180deg,#fdf6ec,#fdf6ec);
    color:#5a4634;
  }

  body {
    display:flex;
  }

  /* Barra lateral */
  #toolbar {
    display:flex;
    flex-direction:column;
    align-items:center;
    padding:16px 12px;
    gap:14px;
    background: linear-gradient(135deg, rgba(255,255,255,0.35), rgba(255,255,255,0.18));
    box-shadow:2px 0 12px rgba(0,0,0,.08);
    border-right:1px solid rgba(255,255,255,0.5);
    border-radius:0 16px 16px 0;
    width:70px;
    flex:0 0 70px;
    z-index:100;
    backdrop-filter: blur(18px);
  }

  #toolbar button {
    background:rgba(255,255,255,0.7);
    color:#5a4634;
    border:none;
    width:42px;
    height:42px;
    display:flex;
    align-items:center;
    justify-content:center;
    border-radius:12px;
    font-size:18px;
    cursor:pointer;
    transition:all .18s ease;
    box-shadow:0 4px 10px rgba(0,0,0,.06);
  }
  #toolbar button:hover {
    transform:translateY(-3px);
    background:rgba(255,255,255,0.9);
  }
  #toolbar button.active {
    background:#d4b48c;
    color:#fff;
    box-shadow:0 0 0 2px #caa86f inset;
  }

  #toolbar input[type=range] {
    width:60px;
    height:4px;
    margin:8px 0;
    border-radius:2px;
    background:#e2c9a6;
    cursor:pointer;
  }
  #toolbar input[type=range]::-webkit-slider-thumb {
    -webkit-appearance:none;
    width:14px;
    height:14px;
    border-radius:50%;
    background:#8b5e2f;
    cursor:pointer;
  }

  #colors {
    display:flex;
    flex-direction:column;
    gap:10px;
    margin-top:6px;
  }
  .color-swatch {
    width:28px;
    height:28px;
    border-radius:50%;
    cursor:pointer;
    border:2px solid transparent;
    box-shadow:0 2px 5px rgba(0,0,0,.08);
    transition:transform .18s ease;
  }
  .color-swatch.active {
    border-color:#8b5e2f;
    transform:scale(1.15);
  }

  /* Container do canvas */
  #canvasContainer {
    flex:1;
    position:relative;
    overflow:hidden;
    display:flex;
    align-items:center;
    justify-content:center;
    padding:18px;
  }
  canvas {
    width:100%;
    height:100%;
    border-radius:12px;
    background:
      repeating-linear-gradient(45deg, rgba(135,100,69,0.03) 0 6px, transparent 6px 12px),
      linear-gradient(180deg, rgba(255,255,255,0.6), rgba(255,255,255,0.04));
    box-shadow: 0 10px 30px rgba(18,16,14,0.08);
  }

  .zoom-wrap {
    font-size:12px;
    margin-top:auto;
    opacity:.7;
    text-align:center;
    line-height:1.1;
    color:#7a6147;
  }
</style>
</head>
<body>
  <div id="toolbar">
    <button id="brush" class="active" title="Pincel">üñä</button>
    <button id="eraser" title="Borracha">‚å´</button>
    <input type="range" id="size" min="1" max="80" value="12">
    <div id="colors"></div>
    <div class="zoom-wrap">üîç<br><span id="zoomLabel">100%</span></div>
  </div>
  <div id="canvasContainer">
    <canvas id="canvas"></canvas>
  </div>
  <script>
    /* ---------- Detecta se est√° em iframe ---------- */
    const inIframe = window.self !== window.top;
    
    /* ---------- Config API/CSRF ---------- */
    const API_URL = '/wplace/state/';
    function getCookie(name){
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if(parts.length===2) return parts.pop().split(';').shift();
    }
    const CSRF = () => getCookie('csrftoken');
    
    /* ---------- Canvas / Estado ---------- */
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const container = document.getElementById('canvasContainer');
    
    let tool = 'brush';
    let drawing = false;
    let size = parseInt(document.getElementById('size')?.value,10) || 12;
    let color = '#000000';
    let offsetX = 0, offsetY = 0, zoom = 1;
    let panStart = null;
    let elements = [];
    let cursor = { x:0, y:0, visible:false };
    let sizeHUD = { show:false, text:'', until:0 };
    
    /* ---------- Toolbar e Paleta ---------- */
    if(inIframe){
      const toolbar = document.getElementById('toolbar');
      if(toolbar) toolbar.style.display = 'none';
    }
    
    const colorsDiv = document.getElementById('colors');
    const colorList = ['#000000','#ffffff','#fde2e4','#fad2e1','#e2ece9','#bee1e6','#cddafd','#d0f4de','#fff1e6','#fce1e4','#f8edeb','#e8e8f8'];
    const brushBtn = document.getElementById('brush');
    const eraserBtn = document.getElementById('eraser');
    
    colorList.forEach((c,i)=>{
      const swatch = document.createElement('div');
      swatch.className = 'color-swatch';
      swatch.style.background = c;
      swatch.title = c;
      if(i===0) swatch.classList.add('active');
      swatch.addEventListener('click', ()=>{
        if(inIframe) return;
        document.querySelectorAll('.color-swatch').forEach(s=>s.classList.remove('active'));
        swatch.classList.add('active');
        color = c;
        tool = 'brush';
        brushBtn.classList.add('active');
        eraserBtn.classList.remove('active');
      });
      colorsDiv.appendChild(swatch);
    });
    color = colorList[0];
    
    if(!inIframe){
      brushBtn?.addEventListener('click', ()=>{ tool='brush'; brushBtn.classList.add('active'); eraserBtn.classList.remove('active'); draw(); });
      eraserBtn?.addEventListener('click', ()=>{ tool='eraser'; eraserBtn.classList.add('active'); brushBtn.classList.remove('active'); draw(); });
      document.getElementById('size')?.addEventListener('input', e=>{
        size = parseInt(e.target.value,10) || 1;
        sizeHUD.text = size + ' px';
        sizeHUD.until = performance.now() + 900;
        sizeHUD.show = true;
        draw();
      });
    }
    
    /* ---------- Resize ---------- */
    function resizeCanvas(){
      const w = container.clientWidth;
      const h = container.clientHeight;
      canvas.width = Math.max(1, Math.floor(w));
      canvas.height = Math.max(1, Math.floor(h));
      canvas.style.width = w + 'px';
      canvas.style.height = h + 'px';
      draw();
    }
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
    
    /* ---------- Utils ---------- */
    function getPointerPos(e){
      const rect = canvas.getBoundingClientRect();
      const clientX = e.clientX ?? (e.touches?.[0]?.clientX);
      const clientY = e.clientY ?? (e.touches?.[0]?.clientY);
      const cx = clientX - rect.left;
      const cy = clientY - rect.top;
      return { x:(cx - offsetX)/zoom, y:(cy - offsetY)/zoom, sx:cx, sy:cy };
    }
    
    /* ---------- Render ---------- */
    function draw(){
      ctx.setTransform(1,0,0,1,0,0);
      ctx.globalCompositeOperation = 'source-over';
      ctx.clearRect(0,0,canvas.width,canvas.height);
    
      ctx.setTransform(zoom,0,0,zoom,offsetX,offsetY);
      for(const el of elements){
        ctx.globalCompositeOperation = (el.type === 'erase') ? 'destination-out' : 'source-over';
        ctx.strokeStyle = el.color || color;
        ctx.lineWidth = el.size || 1;
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        if(!el.path || el.path.length<2) continue;
        ctx.beginPath();
        ctx.moveTo(el.path[0].x, el.path[0].y);
        for(let i=1;i<el.path.length;i++) ctx.lineTo(el.path[i].x, el.path[i].y);
        ctx.stroke();
      }
    
      ctx.setTransform(1,0,0,1,0,0);
      ctx.globalCompositeOperation = 'source-over';
    
      if(cursor.visible){
        const r = (size * zoom)/2;
        ctx.save();
        ctx.strokeStyle = 'rgba(0,0,0,0.85)';
        ctx.lineWidth = 1;
        ctx.beginPath(); ctx.arc(cursor.x, cursor.y, Math.max(1,r), 0, Math.PI*2); ctx.stroke();
        ctx.strokeStyle = 'rgba(255,255,255,0.9)';
        ctx.setLineDash([2,2]);
        ctx.beginPath(); ctx.arc(cursor.x, cursor.y, Math.max(1,r)+1, 0, Math.PI*2); ctx.stroke();
        ctx.restore();
      }
    
      if(sizeHUD.show){
        if(performance.now() > sizeHUD.until){ sizeHUD.show=false; }
        else{
          ctx.save();
          ctx.fillStyle = 'rgba(28,28,30,0.8)';
          ctx.strokeStyle = 'rgba(255,255,255,0.25)';
          ctx.lineWidth = 1;
          const pad=6; ctx.font = '12px system-ui';
          const w = ctx.measureText(sizeHUD.text).width + pad*2;
          const x = Math.min(canvas.width-w-8, Math.max(8, cursor.x + 14));
          const y = Math.min(canvas.height-24, Math.max(16, cursor.y - 10));
          ctx.beginPath(); ctx.roundRect(x,y,w,20,6); ctx.fill(); ctx.stroke();
          ctx.fillStyle='#fff'; ctx.fillText(sizeHUD.text, x+pad, y+14);
          ctx.restore();
        }
      }
    }
    
    /* ---------- Persist√™ncia ---------- */
    let saveTimer = null;
    function scheduleSave(){ if(!inIframe){ clearTimeout(saveTimer); saveTimer = setTimeout(doSave, 350); } }
    function doSave(){
      const payload = { elements, offsetX, offsetY, zoom };
      try { localStorage.setItem('wplace_state', JSON.stringify(payload)); } catch(e){}
      fetch(API_URL, { method:'POST', headers:{ 'Content-Type':'application/json', 'X-CSRFToken': CSRF() }, credentials:'same-origin', body: JSON.stringify(payload) }).catch(()=>{});
    }
    
    /* ---------- Carregar estado ---------- */
    async function loadState(){
      try{
        const r = await fetch(API_URL, { credentials:'same-origin' });
        if(r.ok){
          const data = await r.json();
          elements = Array.isArray(data.elements) ? data.elements : [];
          offsetX  = Number.isFinite(data.offsetX) ? data.offsetX : 0;
          offsetY  = Number.isFinite(data.offsetY) ? data.offsetY : 0;
          zoom     = Number.isFinite(data.zoom)    ? data.zoom    : 1;
          document.getElementById('zoomLabel').textContent = Math.round(zoom*100)+'%';
          draw();
          return;
        }
      }catch(e){}
      try{
        const cached = localStorage.getItem('wplace_state');
        if(cached){
          const data = JSON.parse(cached);
          elements = data.elements || [];
          offsetX  = data.offsetX ?? 0;
          offsetY  = data.offsetY ?? 0;
          zoom     = data.zoom ?? 1;
          document.getElementById('zoomLabel').textContent = Math.round(zoom*100)+'%';
          draw();
        }
      }catch(e){}
    }
    loadState();
    
    /* ---------- Intera√ß√£o ---------- */
    const canDraw = !inIframe;
    
    canvas.addEventListener('mousedown', (e)=>{
      if(e.button === 2){ e.preventDefault(); return; } // sempre bloqueia bot√£o direito
      const p = getPointerPos(e);
      cursor = { x:p.sx, y:p.sy, visible:true };
    
      // Pan com bot√£o do meio ou Shift: sempre permitido
      if(e.button === 1 || e.shiftKey){
        panStart = {x:e.clientX, y:e.clientY, offsetX, offsetY};
        e.preventDefault();
        return;
      }
    
      if(!canDraw) return;
    
      // Desenho/borracha
      if(tool === 'brush' || tool === 'eraser'){
        drawing = true;
        elements.push({ type: tool === 'brush' ? 'path' : 'erase', color, size, path: [{x:p.x, y:p.y}] });
        draw();
      }
    });
    
    canvas.addEventListener('mousemove', (e)=>{
      const p = getPointerPos(e);
      cursor = { x:p.sx, y:p.sy, visible:true };
    
      // Pan
      if(panStart){
        offsetX = panStart.offsetX + (e.clientX - panStart.x);
        offsetY = panStart.offsetY + (e.clientY - panStart.y);
        draw();
        return;
      }
    
      if(!canDraw) return;
    
      if(drawing){
        const el = elements[elements.length-1];
        if(el){ el.path.push({x:p.x, y:p.y}); draw(); }
      }
    });
    
    window.addEventListener('mouseup', ()=>{
      drawing = false;
      panStart = null;
      if(canDraw) scheduleSave();
    });
    
    canvas.addEventListener('mouseleave', ()=>{
      cursor.visible=false; 
      drawing=false; 
      panStart=null; 
      draw();
    });
    
    /* Touch */
    canvas.addEventListener('touchstart', ev=>{
      const t=ev.touches[0];
      const evt = new MouseEvent('mousedown',{clientX:t.clientX,clientY:t.clientY,button:0});
      canvas.dispatchEvent(evt);
    });
    canvas.addEventListener('touchmove', ev=>{
      const t=ev.touches[0];
      const evt = new MouseEvent('mousemove',{clientX:t.clientX,clientY:t.clientY});
      canvas.dispatchEvent(evt);
    });
    canvas.addEventListener('touchend', ev=>{
      const evt = new MouseEvent('mouseup',{});
      canvas.dispatchEvent(evt);
    });
    
    /* Zoom (0%‚Äì300%) */
    canvas.addEventListener('wheel', (e)=>{
      e.preventDefault();
      const rect = canvas.getBoundingClientRect();
      const cx = e.clientX - rect.left;
      const cy = e.clientY - rect.top;
      const zoomFactor = e.deltaY < 0 ? 1.12 : 0.88;
      const newZoom = Math.min(Math.max(zoom * zoomFactor, 0.01), 3);
      offsetX = cx - (cx - offsetX) * (newZoom / zoom);
      offsetY = cy - (cy - offsetY) * (newZoom / zoom);
      zoom = newZoom;
      document.getElementById('zoomLabel').textContent = Math.round(zoom * 100) + '%';
      draw();
      if(canDraw) scheduleSave();
    },{passive:false});
    
    /* Atalho: Espa√ßo para pan */
    let spacePan = false;
    window.addEventListener('keydown', (e)=>{
      if(e.code==='Space' && !spacePan){ spacePan=true; canvas.style.cursor='grab'; }
    });
    window.addEventListener('keyup', (e)=>{
      if(e.code==='Space'){ spacePan=false; canvas.style.cursor='none'; }
    });
    canvas.addEventListener('mousedown', (e)=>{
      if(spacePan && e.button===0){ panStart = {x:e.clientX, y:e.clientY, offsetX, offsetY}; }
    });
    
    /* Outros */
    canvas.addEventListener('contextmenu', e => e.preventDefault());
    function clearAll(){ if(!canDraw) return; elements = []; draw(); scheduleSave(); }
    
    /* Primeiro draw */
    draw();
    </script>
    
    
    
</body>
</html>
