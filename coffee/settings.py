"""
Django settings for coffee project.

Generated by 'django-admin startproject' using Django 5.2.3.
"""

import os
from pathlib import Path

# -----------------------------
# Paths
# -----------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# -----------------------------
# Basic URLs / Login
# -----------------------------
LOGIN_URL = '/login/'

# -----------------------------
# Security & Debug (via env)
# -----------------------------
SECRET_KEY = os.environ.get(
    'DJANGO_SECRET_KEY',
    'django-insecure--gsjmiv)$p8v@x3_i$h=d89q5e7)7yg0qya9jn==#8(aj48u*s'
)

# Default to True for local dev; set DJANGO_DEBUG=False in production env
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

# ALLOWED_HOSTS: can be set via DJANGO_ALLOWED_HOSTS (comma-separated).
# We'll also add the Railway app host if provided.
_allowed = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')
RAILWAY_APP_URL = os.environ.get('RAILWAY_APP_URL')  # ex: test-of-coffee-production.up.railway.app
if RAILWAY_APP_URL:
    _allowed.extend([RAILWAY_APP_URL, f'www.{RAILWAY_APP_URL}'])
# remove empties and duplicates
ALLOWED_HOSTS = sorted(set([h.strip() for h in _allowed if h.strip()]))

# -----------------------------
# Installed apps
# -----------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chat',
    'channels',
]

# -----------------------------
# Middleware
# -----------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',   # serve static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'coffee.urls'

# -----------------------------
# Templates
# -----------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # adicione paths se precisar
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# -----------------------------
# WSGI / ASGI
# -----------------------------
WSGI_APPLICATION = 'coffee.wsgi.application'
ASGI_APPLICATION = 'coffee.asgi.application'

# -----------------------------
# Database configuration
# - Uses DATABASE_URL if present (optional)
# - Otherwise uses SQLite; if RAILWAY_PERSISTENT_DIR is set, it will place db.sqlite3 there
# -----------------------------
DATABASE_URL = os.environ.get('DATABASE_URL')

# Determine SQLite path (supports persistent dir if provided)
RAILWAY_PERSISTENT_DIR = os.environ.get('RAILWAY_PERSISTENT_DIR')  # ex: '/data'
if RAILWAY_PERSISTENT_DIR:
    SQLITE_PATH = Path(RAILWAY_PERSISTENT_DIR) / 'db.sqlite3'
else:
    SQLITE_PATH = BASE_DIR / 'db.sqlite3'

if DATABASE_URL:
    # optional dj_database_url support - only used if DATABASE_URL provided
    try:
        import dj_database_url
        DATABASES = {
            'default': dj_database_url.parse(DATABASE_URL, conn_max_age=600)
        }
    except Exception:
        # fallback: if dj_database_url not installed, still avoid crash
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': SQLITE_PATH,
            }
        }
else:
    # default to local SQLite (use persistent path if provided)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': SQLITE_PATH,
        }
    }

# -----------------------------
# Password validation
# -----------------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# -----------------------------
# Internationalization
# -----------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# -----------------------------
# Static & Media
# -----------------------------
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# -----------------------------
# Large uploads
# -----------------------------
DATA_UPLOAD_MAX_MEMORY_SIZE = 2 * 1024 * 1024 * 1024  # 2GB
FILE_UPLOAD_MAX_MEMORY_SIZE = 2 * 1024 * 1024 * 1024  # 2GB

# -----------------------------
# Channels / Websockets
# -----------------------------
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

# -----------------------------
# Email (use env vars in production)
# -----------------------------
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.environ.get('EMAIL_USER', 'deployzzy@gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASS', 'bcge xzwv bcou fsfj')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# -----------------------------
# CSRF Trusted Origins
# - build from env CSRF_TRUSTED_ORIGINS (comma-separated) and RAILWAY_APP_URL if provided
# -----------------------------
_csrf_list = []
env_csrf = os.environ.get('CSRF_TRUSTED_ORIGINS')
if env_csrf:
    _csrf_list.extend([s.strip() for s in env_csrf.split(',') if s.strip()])

if RAILWAY_APP_URL:
    # add both https and http variants if needed (https recommended)
    _csrf_list.append(f'https://{RAILWAY_APP_URL}')
    _csrf_list.append(f'https://www.{RAILWAY_APP_URL}')

# remove duplicates
CSRF_TRUSTED_ORIGINS = sorted(set(_csrf_list))

# -----------------------------
# Default primary key field type
# -----------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
